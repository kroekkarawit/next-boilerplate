generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String          @unique
  password       String?
  mobile         String?
  email          String?
  balance        Float           @default(0.00)
  remark         String?
  status         UserStatus      @default(ACTIVE)
  ipAddress      String?
  referralCode   String          @unique
  referredBy     String?         @db.ObjectId
  referredUsers  User[]          @relation("ReferralRelation")
  referrer       User?           @relation("ReferralRelation", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedAt      DateTime        @updatedAt
  createdAt      DateTime        @default(now())
  socialAccounts SocialAccount[]
  transactions   Transaction[]
  deposits       Deposit[]
  withdraws      Withdraw[]
  banks          Bank[]
  fees           Fee[]
}

model SocialAccount {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  provider       String // e.g., 'google', 'line'
  providerUserId String // e.g., sub from OAuth profile
  email          String? // Email if available from the provider
  name           String? // Full name from the provider
  picture        String? // Profile picture URL from the provider
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  @@unique([provider, providerUserId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Bank {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  name      String
  code      String
  number    String
  status    BankStatus
  createdAt DateTime   @default(now())
}

enum BankStatus {
  ACTIVE
  INACTIVE
}

model Transaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  amount    Float
  ref       String?         @db.ObjectId
  type      TransactionType
  createdAt DateTime        @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PAY_BILL
  PURCHASE
  FEE
  COMMISSION
  TRANFER
  REFUND
}

model Deposit {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  amount    Float
  fee       Float
  gateway   String
  detail    String?
  remark    String?
  status    DepositStatus
  createdAt DateTime      @default(now())
}

enum DepositStatus {
  COMPLETE
  CANCEL
  PENDING
}

model Withdraw {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  amount    Float
  fee       Float
  bankId    String
  detail    String?
  remark    String?
  status    DepositStatus
  createdAt DateTime      @default(now())
}

enum WithdrawStatus {
  COMPLETE
  CANCEL
  PENDING
}

model Fee {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  amount    Float
  type      FeeType
  createdAt DateTime @default(now())
}

enum FeeType {
  CREATE_BILL_FEE
  PAID_BILL_FEE
}

model Category {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  status      Status
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}
