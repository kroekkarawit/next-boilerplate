generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String     @unique
  password      String?
  mobile        String?
  email         String?
  remark        String?
  status        UserStatus @default(ACTIVE)
  ipAddress     String?
  referralCode  String     @unique
  referredBy    String?    @db.ObjectId
  referredUsers User[]     @relation("ReferralRelation")
  referrer      User?      @relation("ReferralRelation", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  balance       Float      @default(0)
  transferLimit Int?       @default(1000)

  language LanguageType @default(EN)

  updatedAt      DateTime         @updatedAt
  createdAt      DateTime         @default(now())
  socialAccounts SocialAccount[]
  transactions   Transaction[]
  deposits       Deposit[]
  withdrawals    Withdrawal[]
  paymentAccount PaymentAccount[]
}

model SocialAccount {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  provider       String // e.g., 'google', 'line'
  providerUserId String // e.g., sub from OAuth profile
  email          String? // Email if available from the provider
  name           String? // Full name from the provider
  picture        String? // Profile picture URL from the provider
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  @@unique([provider, providerUserId])
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum LanguageType {
  TH
  EN
}


model PaymentAccount {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @db.ObjectId
  type      PaymentType
  gateway   PaymentGateway
  details   Json // Stores gateway-specific details (e.g., PayPal email, Stripe account ID)
  note      String?
  status    PaymentStatus  @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum PaymentType {
  BANK
  PAYPAL
  STRIPE
  CRYPTO
}

enum PaymentGateway {
  STRIPE
  PAYPAL
  BANK_TRANSFER
  CRYPTO_BTC
  CRYPTO_ETH
  CRYPTO_USDT
  ALIPAY
  WECHAT
}

enum PaymentStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
}

model Transaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  amount    Float
  ref       String?         
  type      TransactionType
  createdAt DateTime        @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PURCHASE
  FEE
  COMMISSION
  TRANSFER
  REFUND
  PROFIT_SHARING
}

model Deposit {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  amount    Float
  fee       Float
  gateway   String
  detail    String?
  remark    String?
  status    DepositStatus
  createdAt DateTime      @default(now())
}

enum DepositStatus {
  COMPLETE
  CANCEL
  PENDING
}

model Withdrawal {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @db.ObjectId
  amount    Float
  fee       Float
  bankId    String
  detail    String?
  remark    String?
  status    WithdrawStatus
  createdAt DateTime       @default(now())
}

enum WithdrawStatus {
  COMPLETE
  CANCEL
  PENDING
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}
